# --- 공통 DNS 재해석 (Docker 내부 DNS)
resolver 127.0.0.11 valid=30s ipv6=off;
resolver_timeout 5s;

# --- 백엔드 업스트림 풀: Docker 컨테이너 IP가 바뀌어도 자동 재해석
upstream backend_pool {
  zone backend_pool 64k;
  server backend:8083 resolve;
  keepalive 64;                 # 커넥션 재사용
}

# --- 80 → 443 리다이렉트 + ACME 챌린지
server {
    listen 80;
    server_name seosan-issue.shop;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# --- HTTPS 본 서버
server {
    listen 443 ssl;
    server_name seosan-issue.shop;

    ssl_certificate     /etc/letsencrypt/live/seosan-issue.shop/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/seosan-issue.shop/privkey.pem;

    # 1) 루트 헬스체크/봇 트래픽 차단용: 백엔드 태우지 않음
    location = / {
        return 200 "ok\n";
        add_header Content-Type text/plain;
    }

    # 2) 민감/숨김 파일 차단
    location ~ /\.(git|env|hg|svn|DS_Store) {
        return 404;
    }

    # (선택) 흔한 스캔 패턴 즉시 차단
    location ~* /(wp-login\.php|\.git/|\.env|\.vscode/) { return 404; }

    # 3) 장시간 연산이 가능한 기본 프록시
    location / {
        proxy_pass http://backend_pool;
        proxy_http_version 1.1;

        # keepalive 동작을 위한 권장 헤더
        proxy_set_header Connection "";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 타임아웃: 백엔드(WebClient 300s 가드)와 정합
        proxy_connect_timeout  30s;   # 초기 연결
        proxy_send_timeout     310s;  # 요청 바디 송신
        proxy_read_timeout     310s;  # 응답 수신(요약/크롤링 대기)

        send_timeout           310s;

        # 버퍼링: 기본 on (대부분 JSON 응답에 유리)
        # proxy_buffering on;

        # POST 재시도 방지(중복 연산 방지) - 기본적으로 non_idempotent 제외지만 명시해둠
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }

    # 4) 정말 오래 걸릴 수 있는 엔드포인트에만 개별 상향(필요시)
    location ~ ^/api/v1/(ai-search|explore/summary) {
        proxy_pass http://backend_pool;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout  30s;
        proxy_send_timeout     330s;
        proxy_read_timeout     330s;
        send_timeout           330s;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }

    # 5) (선택) 응답 압축 — 백엔드는 외부 API에 Accept-Encoding 안 보냄. 클라로 내보낼 때만 gzip OK.
    gzip on;
    gzip_types application/json application/javascript text/css text/plain;
    gzip_min_length 1024;
    gzip_vary on;

    # 6) (추천) 더 좋은 장애 분석을 위한 로그 포맷
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                    'rt=$request_time urt=$upstream_response_time ustat=$upstream_status';
    access_log /var/log/nginx/access.log main;
}
